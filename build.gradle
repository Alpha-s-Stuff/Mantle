/*
 * Mantle
 * Master build file
 * Based on TConstruct's master build file
 * Authors: Sunstrike, ProgWML6
 * Help from AbrarSyed
*/

plugins {
    id 'fabric-loom' version '0.10-SNAPSHOT'
    id 'maven-publish'
    id 'io.github.juuxel.loom-quiltflower-mini' version '1.+'
    id 'org.quiltmc.quilt-mappings-on-loom' version '3.1.1'
}

repositories {
    mavenLocal()
    maven { url = "https://maven.parchmentmc.org" }
    maven { url = "https://maven.shedaniel.me/" }
    maven { url = "https://cursemaven.com" }
}

group = 'slimeknights.mantle'

// sets version to the slimeKnights version format
task buildInfo {
    try {
        def cmd = "git rev-parse --short HEAD"
        def proc = cmd.execute()
        proc.waitFor()
        if (proc.exitValue() == 0) {
            ext.revision = proc.text.trim()
        } else {
            ext.revision = "GITBORK"
        }
    } catch (all) {
        ext.revision = "gitgud"
    }

    if (System.getenv().BUILD_NUMBER != null) {
        ext.buildNum = "${System.getenv().BUILD_NUMBER}"
    } else {
        ext.buildNum = "DEV.${project.buildInfo.revision}"
    }
}
ext.artifact_version = 'NFG'
if (System.getenv().ARTIFACT_VERSION == null) {
    artifact_version = "${mod_version}.${project.buildInfo.buildNum}"
}
if (System.getenv().ARTIFACT_VERSION != null) {
    artifact_version = "${system.getenv().ARTIFACT_VERSION}"
}

version = "${minecraft_version}-${artifact_version}"

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

sourceSets {
    main {
        resources {
            srcDirs "src/generated/resources"
            //But exclude the cache of the generated data from what gets built
            exclude '.cache'
        }
    }
}

loom {
    runs {
        datagen {
            client()

            name "Data Generation"
            vmArg "-Dfabric-api.datagen"
            vmArg "-Dfabric-api.datagen.output-dir=${file("src/generated/resources")}"
            vmArg "-Dfabric-api.datagen.modid=create"
            // from ae2
            property "com.simibubi.create.existingData", file("src/main/resources").absolutePath

            runDir "build/datagen"
        }
    }
}
assemble.dependsOn runDatagen

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

configurations {
    deployerJars
}
               
dependencies {
    minecraft "com.mojang:minecraft:${minecraft_version}"

    mappings loom.layered {
        it.addLayer(quiltMappings.mappings("org.quiltmc:quilt-mappings:1.18.1+build.4:v2")) // https://maven.quiltmc.org/#browse/browse:release
        it.parchment("org.parchmentmc.data:parchment-1.18.1:BLEEDING-20211212.174449-1@zip") // https://ldtteam.jfrog.io/ui/native/parchmentmc-public/org/parchmentmc/data/parchment-1.18.1/BLEEDING-SNAPSHOT
        it.officialMojangMappings {
            setNameSyntheticMembers(false)
        }
    }

    // compile against the REI API but do not include it at runtime
    modCompileOnly("me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}") { transitive = false }
    // at runtime, use the full REI jar
    modRuntimeOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") { transitive = false }
    // api for REI
    modImplementation("dev.architectury:architectury-fabric:${project.architectury_version}")

    modImplementation(include("curse.maven:forge-config-api-port-fabric-547434:${forge_config_version}"))

    implementation(include("com.google.code.findbugs:jsr305:3.0.2"))
}

def modsTomlSpec = copySpec{
    from(sourceSets.main.resources) {
        include 'META-INF/mods.toml'
        expand 'version': artifact_version,
                'loader_range': loader_range,
                'minecraft_range': minecraft_range,
                'forge_range': forge_range
    }
}

// need to copy into each build directory, unfortunately does not seem easy to do this automatically
def buildPaths = [
        "$rootDir/out/production/resources", // IDEA
        "$rootDir/bin", // Eclipse
]

// task to add mods.toml to all relevant folders
task replaceResources {
    // copy for gradle
    copy {
        outputs.upToDateWhen { false }
        with modsTomlSpec
        into processResources.destinationDir
    }
    // copy for IDEs
    buildPaths.each { path ->
        if (new File(path).exists()) {
            copy {
                outputs.upToDateWhen { false }
                with modsTomlSpec
                into path
            }
        }
    }
}

processResources {
    exclude 'META-INF/mods.toml'
    finalizedBy replaceResources
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "Mantle",
                "Specification-Vendor"    : "Slime Knights",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Slime Knights",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

artifacts {
    archives sourcesJar
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
            artifact sourcesJar
        }
    }

    repositories {
        if (project.hasProperty('DEPLOY_DIR')) {
            maven { url DEPLOY_DIR }
        }
    }
}
